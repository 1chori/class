// 로또 추첨기 만들기

// 1. 겹치는 숫자가 없어야한다
// 2. 숫자가 6개
// 3. 나온 숫자들의 결과를 보여주자

// 로또 추첨 기계

let lottoNum = [];
let res = [];

// 로또의 번호를 모두 뽑아놓고 가져다 사용하자
// 1 ~ 45번까지 반복

// 배열에 값을 추가하는 작업은 초기화를 해야하는지 확인을 꼭하고 작업을 진행해야한다


// 체크하면서 만들어야 버그가 어디서 났는지 해결하기 쉽다



// 추첨 전에 세팅작업
function lottoInit() {
    lottoNum = [];
    // 로또의 번호를 모두 뽑아놓고 가져다 사용하자
    // 1 ~ 45번까지 반복
    for (let i = 1; i <= 45; i++) {
        // 1~45까지 숫자를 배열에 담아준다
        lottoNum.push(i);
    }

    console.log('init함수 실행 lotto 세팅 끝' + lottoNum);
}

//로또 추첨 실행 함수
function lottoplay() {
    res = [];
    // 추첨
    for (let i = 0; i < 6; i++) {
        // 0~44 랜덤 숫자를 뽑고 인덱스로 사용하자
        let rndIndex = Math.floor(Math.random() * lottoNum.length);

        // 랜덤으로 뽑은 인덱스로 lottoNum 배열에 인덱스에 전달해서 number라는 변수에 담아놓자(사용하기 위해 담음)
        let number = lottoNum[rndIndex];

        // 랜덤한 값이 또 나오지 않게 하기 위해.
        // 배열에서 값을 제거하려면 어떻게?
        // 배열의 메소드 splice 함수 사용
        // 시작점, 시작점으로부터 몇 개 제거할 것인지를 매개변수로 전달
        lottoNum.splice(rndIndex,1);
        // 인덱스에 해당하는 값 하나만 제거
        // 해당 배열에서 값이 제거되면 길이가 줄어들기 때문에
        // 랜덤값을 구하는 과정에서도 lottoNum.length 길이 값이 줄어들기 때문
        // 정상적으로 작동 될 수 있다

        // 결과값 담아두자
        res.push(number);
    }
}

function main() {
    // 로또 세팅
    lottoInit();
    // 로또 추첨
    lottoplay();

    console.log('로또 결과는?' + res);
}

// 함수 초기화나 play같은 위의 코드처럼 단위별로 기능을 정리해 두었을 때
// 단위 테스트가 가능하다

// 단위별로 버그가 없는지 테스트 해볼 수 있다
// 단위별 기능 오류가 없게 되면 통합 테스트를 진행. 전체적 기능이 오류가 없는지 테스트 진행할 수 있다

// 전체기능이 들어있는 함수를 만들고 함수가 실행될 때마다 해당 기능이 동작할 수 있게 재사용성을 높일 수 있다

main();
main();
main();
